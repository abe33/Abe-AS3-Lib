package aesia.com.ponents.trees {
	import aesia.com.ponents.history.UndoManagerInstance;	import aesia.com.ponents.lists.List;	import aesia.com.ponents.lists.ListTransferable;	import aesia.com.ponents.models.TreeNode;	import aesia.com.ponents.transfer.ComponentsFlavors;	import aesia.com.ponents.transfer.ComponentsTransferModes;	import aesia.com.ponents.transfer.DataFlavor;	/**
	 * @author Cédric Néhémie
	 */
	public class TreeTransferable extends ListTransferable 	{
		public function TreeTransferable ( data : *, list : List, mode : String = "move", pos : int = 0 )		{			super( data, list, mode, pos );		}		override public function getData (flavor : DataFlavor) : *		{			if( ComponentsFlavors.LIST_ITEM.equals( flavor ) )				return (_data as TreeNode).userObject;			else if( ComponentsFlavors.TREE_ITEM.equals( flavor ) )				return _data;						else				return null;		}				override public function get flavors () : Array		{			return [ ComponentsFlavors.LIST_ITEM, ComponentsFlavors.TREE_ITEM ];		}		override public function transferPerformed () : void		{			var n : TreeNode = (_data as TreeNode);			switch( mode )			{				case ComponentsTransferModes.MOVE : 					UndoManagerInstance.add( new TreeTransferPerformedUndoableEdit( n, n.parent, n.index ) );					n.removeFromParent();					break;				case ComponentsTransferModes.COPY : 					break;			}		}	}
}
import aesia.com.ponents.history.AbstractUndoable;import aesia.com.ponents.models.TreeNode;internal class TreeTransferPerformedUndoableEdit extends AbstractUndoable{	private var node : TreeNode;	private var parent : TreeNode;	private var index : Number;		public function TreeTransferPerformedUndoableEdit ( node : TreeNode, parent : TreeNode, index : Number )	{		this.node = node;		this.parent = parent;		this.index = index;	}	override public function undo () : void	{		parent.insert(node, index);		super.undo();	}	override public function redo () : void	{		parent.remove(node);		super.redo();	}	override public function get isSignificant () : Boolean	{		return false;	}}
