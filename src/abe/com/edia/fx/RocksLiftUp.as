/** * @license */package abe.com.edia.fx{	import abe.com.edia.fx.emitters.Emitter;	import abe.com.edia.fx.emitters.PointEmitter;	import abe.com.mon.core.Allocable;	import abe.com.mon.core.Randomizable;	import abe.com.mon.core.Runnable;	import abe.com.mon.core.Suspendable;	import abe.com.mon.geom.pt;	import abe.com.mon.utils.AllocatorInstance;	import abe.com.mon.colors.Color;	import abe.com.mon.randoms.Random;	import abe.com.mon.utils.RandomUtils;	import abe.com.motion.Impulse;	import abe.com.motion.ImpulseEvent;	import abe.com.motion.ImpulseListener;	import flash.display.DisplayObjectContainer;	import flash.events.EventDispatcher;	import flash.geom.Point;	/**	 * @author Cédric Néhémie	 */	public class RocksLiftUp extends EventDispatcher implements ImpulseListener, Runnable, Suspendable, Allocable, Randomizable	{		protected var _isRunning : Boolean;		protected var time : uint;		protected var life : uint;		public var target : DisplayObjectContainer;		public var emitter : Emitter;		public var emissionDuration : Number;		public var emissionRate : Number;				public var rockColor : Color;		public var rockShadowColor : Color;		public var rockLifeMin : Number;		public var rockLifeMax : Number;		public var rockEdgesMin : uint;		public var rockEdgesMax : uint;		public var rockSizeMin : Number;		public var rockSizeMax : Number;		public var rockLodLevelsMin : uint;		public var rockLodLevelsMax : uint;		public var rockVelocityMin : Number;		public var rockVelocityMax : Number;		public var rockGravity : Point;		public var rockFriction : Number;
		public function RocksLiftUp  (  target : DisplayObjectContainer = null,																				emitter : Emitter = null,										emissionDuration : Number = 2000,										emissionRate : Number = 500,										 										rockColor : Color = null,										rockShadowColor : Color = null,										rockLifeMin : Number = 1500,										rockLifeMax : Number = 2500,										rockEdgesMin : uint = 4,										rockEdgesMax : uint = 7,										rockSizeMin : Number = 5,										rockSizeMax : Number = 10,										rockLodLevelsMin : uint = 3,										rockLodLevelsMax : uint = 5,										rockVelocityMin : Number = -10,										rockVelocityMax : Number = -20,										rockGravity : Point = null,										rockFriction : Number = 1										) 		{			this.target = target;						this.emitter = emitter ? emitter : new PointEmitter(pt());			this.emissionDuration = emissionDuration;			this.emissionRate = emissionRate;						this.rockColor = rockColor ? rockColor : Color.Peru;			this.rockShadowColor = rockShadowColor ? rockShadowColor : Color.SaddleBrown;			this.rockLifeMin = rockLifeMin;			this.rockLifeMax = rockLifeMax;			this.rockEdgesMin = rockEdgesMin;			this.rockEdgesMax = rockEdgesMax;			this.rockSizeMin = rockSizeMin;			this.rockSizeMax = rockSizeMax;			this.rockLodLevelsMin = rockLodLevelsMin;			this.rockLodLevelsMax = rockLodLevelsMax;			this.rockVelocityMin = rockVelocityMin;			this.rockVelocityMax = rockVelocityMax;			this.rockGravity = rockGravity ? rockGravity : pt();			this.rockFriction = rockFriction;			_randomSource = RandomUtils.RANDOM;		}		protected var _randomSource : Random;		public function get randomSource () : Random { return _randomSource; }		public function set randomSource (randomSource : Random) : void		{			_randomSource = randomSource;		}		public function tick (e : ImpulseEvent) : void		{			time += e.bias;			life += e.bias;			if( time > emissionRate )			{				time -= emissionRate;				var r : Rock = AllocatorInstance.get( Rock,										{											color:rockColor, 											shadowColor:rockShadowColor, 											size : _randomSource.rangeAB( rockSizeMin, rockSizeMax ),											maxLife : _randomSource.rangeAB( rockLifeMin, rockLifeMax ),											edges : _randomSource.irangeAB( rockEdgesMin, rockEdgesMax ),											lodLevels : _randomSource.irangeAB( rockLodLevelsMin, rockLodLevelsMax ),											velocity : pt(0, _randomSource.rangeAB( rockVelocityMin, rockVelocityMax ) ),											gravity : rockGravity,											friction : rockFriction										} );				var position : Point = emitter.get();				r.x = position.x;				r.y = position.y;				r.init();				target.addChildAt( r, 0 );			}			if( life > emissionDuration )			{				stop();				AllocatorInstance.release(this);			}		}				public function init () : void		{			time = 0;			start();		}				public function dispose () : void		{			stop();		}				public function isRunning () : Boolean		{			return _isRunning;		}				public function start () : void		{			if( !_isRunning )			{				_isRunning = true;				Impulse.register( tick );			}		}		public function stop () : void		{			if( _isRunning )			{				Impulse.unregister( tick );				_isRunning = false;			}		}	}}