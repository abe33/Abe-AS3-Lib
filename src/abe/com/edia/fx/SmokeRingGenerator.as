/** * @license */package abe.com.edia.fx{	import abe.com.mon.colors.Color;	import abe.com.mon.core.Allocable;	import abe.com.mon.core.Randomizable;	import abe.com.mon.core.Runnable;	import abe.com.mon.core.Suspendable;	import abe.com.mon.geom.Ellipsis;	import abe.com.mon.geom.pt;	import abe.com.mon.randoms.Random;	import abe.com.mon.utils.AllocatorInstance;	import abe.com.mon.utils.PointUtils;	import abe.com.mon.utils.RandomUtils;	import abe.com.motion.Impulse;	import abe.com.motion.ImpulseListener;	import flash.display.DisplayObjectContainer;	import flash.geom.Point;	/**	 * @author Cédric Néhémie	 */	public class SmokeRingGenerator implements ImpulseListener, Runnable, Suspendable, Allocable, Randomizable	{		protected var _isRunning : Boolean;		protected var time : Number;		protected var life : Number;				public var emissionDuration : Number;		public var emissionRate : Number;		public var color : Color;		public var bias : Number;		public var ellipsisMin : Ellipsis;		public var ellipsisMax : Ellipsis;		public var growthRateMin : Number;		public var growthRateMax : Number;		public var thicknessGrowthRateMin : Number;		public var thicknessGrowthRateMax : Number;		public var velocityMin : Point;		public var velocityMax : Point;		public var lifeMin : Number;		public var lifeMax : Number;		public var thicknessMin : Number;		public var thicknessMax : Number;		public var position : Point;		public var target : DisplayObjectContainer;		public function SmokeRingGenerator  ( target : DisplayObjectContainer,											  position : Point = null,											  emissionDuration : Number = 2000,											  emissionRate : Number = 1500,											  color : Color = null,											  bias : Number = 12,											  ellipsisMin : Ellipsis = null,											  ellipsisMax : Ellipsis = null,											  growthRateMin : Number = .4,											  growthRateMax : Number = .5,											  thicknessGrowthRateMin : Number = .8,											  thicknessGrowthRateMax : Number = 1.2,											  velocityMin : Point = null,											  velocityMax : Point = null,											  lifeMin : Number = 4000,											  lifeMax : Number = 6000,											  thicknessMin : Number = .5,											  thicknessMax : Number = 2											   ) 		{			this.target = target;			this.position = position ? position : pt();			this.emissionDuration = emissionDuration;			this.emissionRate = emissionRate;			this.color = color ? color : Color.White;			this.bias = bias;			this.ellipsisMin = ellipsisMin ? ellipsisMin : new Ellipsis(0, 0, 10, 5);			this.ellipsisMax = ellipsisMax ? ellipsisMax : new Ellipsis(0, 0, 15, 7.5);			this.growthRateMin = growthRateMin;			this.growthRateMax = growthRateMax;			this.thicknessGrowthRateMin = thicknessGrowthRateMin;			this.thicknessGrowthRateMax = thicknessGrowthRateMax;			this.velocityMin = velocityMin ? velocityMin : pt( 2, -8 );			this.velocityMax = velocityMax ? velocityMin : pt( 4, -12 );			this.lifeMin = lifeMin;			this.lifeMax = lifeMax;			this.thicknessMin = thicknessMin;			this.thicknessMax = thicknessMax;			_randomSource = RandomUtils.RANDOM;		}		protected var _randomSource : Random;		public function get randomSource () : Random { return _randomSource; }		public function set randomSource (randomSource : Random) : void		{			_randomSource = randomSource;		}		public function tick (bias : Number, biasInSeconds : Number, current : Number) : void		{			time += bias;			life += bias;			if( time > emissionRate )			{				time -= emissionRate;				var ellipsis : Ellipsis = ellipsisMin.interpolate( ellipsisMax, _randomSource.random() );				var sr : SmokeRing = AllocatorInstance.get( SmokeRing,										{											ellipsis:ellipsis, 											color:color, 											bias:bias, 											growthRate:_randomSource.rangeAB( growthRateMin, growthRateMax ), 											thicknessGrowthRate:_randomSource.rangeAB( thicknessGrowthRateMin, thicknessGrowthRateMax ), 											velocity:PointUtils.interpolate( velocityMin, velocityMax, _randomSource.random() ), 											life:_randomSource.rangeAB( lifeMin, lifeMax ), 											thicknessMin:thicknessMin, 											thicknessMax:thicknessMax										} );				sr.x = position.x;				sr.y = position.y;				sr.init();				target.addChildAt( sr, 0 );			}			if( life > emissionDuration )			{				stop( );				AllocatorInstance.release(this);			}		}				public function init () : void		{			life = 0;			time = 0;			start();		}				public function dispose () : void		{			stop();		}				public function isRunning () : Boolean		{			return _isRunning;		}				public function start () : void		{			if( !_isRunning )			{				_isRunning = true;				Impulse.register( tick );			}		}		public function stop () : void		{			if( _isRunning )			{				Impulse.unregister( tick );				_isRunning = false;			}		}	}}